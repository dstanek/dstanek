#!/usr/bin/env python3

"""
Inspired by:
    http://coderwall.com/p/g-1n9w
"""

from email.utils import parsedate
from datetime import datetime
import subprocess
import sys
import time


DEFAULT_DAYS_BRANCH_TOO_OLD = 7
DEFAULT_DAYS_STASH_TOO_OLD = 1


def sh(*args, **kwargs):
    return subprocess.check_output(*args, **kwargs).decode('utf8').strip()


def green(text):
    return '\033[32m' + text + '\033[0m'


def yellow(text):
    return '\033[33m' + text + '\033[0m'


def red(text):
    return '\033[91m' + text + '\033[0m'


def make_commits(cmd):
    output = sh(cmd)
    for branch in output.split('\n'):
        symname, date, relative_date = branch.split('|')
        yield Commit(symname, date, relative_date)


def local_branches():
    cmd = ('git for-each-ref '
           '--format=%(refname:short)|%(committerdate)|%(committerdate:relative) '
           'refs/heads').split()
    return make_commits(cmd)


def get_stashes():
    return make_commits(['git', 'stash', 'list', '--pretty=format:%gd|%cd|%cr'])


class Commit:

    def __init__(self, name, date, relative_date):
        self.name = name
        self.date = datetime.fromtimestamp(time.mktime(parsedate(date)))
        self.relative_date = relative_date

    def __lt__(self, other):
        """Makes commits sortable."""
        return self.date < other.date

    def older_than(self, days):
        today = datetime.today()
        return (today - self.date).days > days


class CommitList:

    def __init__(self, days_too_old, iterable):
        self.days_too_old = days_too_old
        self._old_branches = []
        self._recent_branches = []
        for commit in iterable:
            self.append(commit)

    def append(self, commit):
        if commit.older_than(days=self.days_too_old):
            self._old_branches.append(commit)
        else:
            self._recent_branches.append(commit)

    @property
    def recent(self):
        return sorted(self._recent_branches)

    @property
    def older(self):
        return sorted(self._old_branches)


class CommitRenderer:

    def __init__(self, date_color):
        self.date_color = date_color

    def render(self, commit):
        return '#    {0:<28s}\t{1}'.format(
                self.date_color(commit.relative_date), commit.name)


def print_section(commits, header, renderer, extra=None):
    if not commits:
        return

    print('#')
    print('# {0}:'.format(header))
    if extra:
        print('#   ({0})'.format(extra))
    print('#')
    for commit in commits:
        print(renderer.render(commit))


def main(args):

    old_commit_renderer = CommitRenderer(date_color=red)
    recent_commit_renderer = CommitRenderer(date_color=green)

    print('# Branch activity')

    branches = CommitList(DEFAULT_DAYS_BRANCH_TOO_OLD, local_branches())
    print_section(branches.older, 'Old branches', old_commit_renderer,
                  'consider merging and/or deleting if no longer active')
    print_section(branches.recent, 'Recently modified branches',
                  recent_commit_renderer)

    stashes = CommitList(DEFAULT_DAYS_STASH_TOO_OLD, get_stashes())
    print_section(stashes.older, 'Old stashes', old_commit_renderer,
            'stashes should be deleted daily; what are you doing?')
    print_section(stashes.recent, 'Recent stashes',
            recent_commit_renderer)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
