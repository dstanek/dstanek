#!/usr/bin/env python

from collections import namedtuple
import os
from subprocess import check_output
import sys


def usage(error_msg=None):
    if error_msg:
        print('error: {}\n'.format(error_msg))
    print('usage:')
    print('  git ribbon set [branch]')
    print('  git ribbon catchup [branch]')
    print('  git ribbon list')
    print('  (if no branch is specified your current branch is used)')
    return 1


class CommandLineError(Exception):
    """Validation errors on the command-line."""


def parse_args(args):
    args.reverse()
    try:
        command = args.pop()
    except IndexError:
        raise CommandLineError

    if command in ('set', 'catchup'):
        try:
            branch = args.pop()
        except IndexError:
            branch = remote_for_current_branch()
    elif command == 'list':
        branch = None
    else:
        raise CommandLineError

    if args:
        raise CommandLineError

    Args = namedtuple('Args', 'command branch')
    return Args(command, branch)


def shell(cmd):
    """Run a shell command."""
    return check_output(cmd, universal_newlines=True, shell=True).strip()


def remote_for_current_branch():
    """Return the current branch."""
    local_branch = shell('git rev-parse --abbrev-ref HEAD')
    return shell("git for-each-ref --format='%(upstream:short)' "
                 "refs/heads/" + local_branch)


def verify(branch):
    return True


def set_command(branch):
    ref = shell('git show-ref --hash=7 ' +  branch)
    tag_name = '_ribbon_' + branch

    print('setting ribbon on {0} ({1})'.format(branch, ref))
    shell('git tag --force {} {}'.format(tag_name, branch))


def catchup_command(branch):
    ref_range = '_ribbon_' + branch + '..' + branch
    os.execlp('git',
        'git', 'log', '--patch', '--reverse',  '--topo-order', ref_range)


def count_new_commits(tag, branch):
    return int(shell('git rev-list {}..{} | wc -l'.format(tag, branch)))


def list_command():
    for tag in shell('git tag | grep _ribbon_').split('\n'):
        branch = tag[8:]
        new_commits = count_new_commits(tag, branch)
        if not new_commits:
            print(branch)
        else:
            print(branch, '\033[91m({} unreviewed commits)\033[0m'.format(new_commits))


def main(args):
    try:
        args = parse_args(args)
    except CommandLineError as e:
        return usage(str(e))

    if args.command == 'set':
        set_command(args.branch)
    elif args.command == 'catchup':
        catchup_command(args.branch)
    elif args.command == 'list':
        list_command()

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
